generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- 인증기능 ----
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int? // add field for kakao oAuth
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  emotions      Emotion[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 포스팅
model Post {
  id        String    @id @default(cuid())
  content   String
  hashtags  String[]
  images    String[]
  place     Place?    @relation(fields: [placeId], references: [id])
  placeId   String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime  @default(now())
  comments  Comment[]
  emotions  Emotion[]

  @@index([hashtags, placeId])
}

// 댓글
model Comment {
  id        String   @id @default(cuid())
  parentId  String?
  isParent  Boolean  @default(false)
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

// 좋아요
model Emotion {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId, userId])
}

// 장소
model Place {
  id           String      @id @default(cuid())
  name         String
  content      String
  hashtags     String[]
  images       String[]
  posts        Post[]
  address      RoadAdress?
  createdAt    DateTime    @default(now())
  roadAdressId String
}

// 도로명 주소
model RoadAdress {
  id             String   @id @default(cuid())
  place          Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId        String   @unique
  latitude       Float
  longitude      Float
  addressName    String
  regionName     String[]
  roadName       String
  undergroundYn  String
  mainBuildingNo String
  subBuildingNO  String
  buildingName   String
  zoneNo         String
}
